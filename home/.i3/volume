#!/usr/bin/python3

import argparse
import subprocess
import re
from collections import namedtuple

Device = namedtuple("Device", ["id", "state", "name"])


def change_vol(amount, sink):
    amount = f"+{amount}%" if amount >= 0 else f"{amount}%"
    subprocess.run(["pactl", "set-sink-volume", sink, amount], stdout=subprocess.PIPE)


def toggle_mute(sink):
    subprocess.run(["pactl", "set-sink-mute", sink, "toggle"], stdout=subprocess.PIPE)


def get_sink():
    result = subprocess.run(["pactl", "list", "sinks"], stdout=subprocess.PIPE)
    stdout = result.stdout.decode("utf-8")
    devices = [
        Device(d[0], d[1], d[2])
        for d in re.findall("#([0-9]+)\n\tState: (RUNNING|SUSPENDED)\n\tName: ([^\s+]+)", stdout)
    ]
    print(devices)
    # Prefer RUNNING devices
    running = [d for d in devices if d.state == "RUNNING"]
    if running:
        return running[0].id
    analog = [d for d in devices if "analog" in d.name]
    if analog:
        return analog[0].id
    # Return the first SUSPENDED otherwise
    if devices:
        return devices[0].id
    return None


def main():
    parser = argparse.ArgumentParser(description="Process some integers.")
    parser.add_argument(
        "amount",
        metavar="N",
        type=int,
        nargs="+",
        help="an integer for the accumulator",
    )
    args = parser.parse_args()
    amount = args.amount[0]
    sink = get_sink()

    if not sink:
        print("Couldn't find sink")
        return

    if amount == 0:
        toggle_mute(sink)
    else:
        change_vol(amount, sink)


main()
